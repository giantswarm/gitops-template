#!/bin/bash

set -e
set -o pipefail

help() {
	echo -e "
Test syntax using fake-flux-build helper. Must be run from repo root dir (a dir that contains
'management-clusters' dir).

Usage: $0 [validate|template]

"
	exit 1
}

test() {
	mode="$1"
	mc_dir="management-clusters"
	for mc in $(find ${mc_dir}/ -maxdepth 1 -type d ! -path ${mc_dir}/); do
		mc_name=${mc##*/}
		org_dir="${mc}/organizations"
		for org in $(find "${org_dir}"/ -maxdepth 1 -type d ! -path "${org_dir}"/); do
			org_name=${org##*/}
			wc_dir="${org}/workload-clusters"
			for wc in $(find "${wc_dir}"/ -maxdepth 1 -type d ! -path "${wc_dir}"/); do
				wc_name=${wc##*/}
				dir_list=""
				if [[ -f "$wc/kustomization.yaml" ]]; then
					dir_list="/"
				else
					dir_list=$(find "${wc}"/ -maxdepth 1 -type d ! -path "${wc}"/)
				fi
				for dir_name in $dir_list; do
					if [[ "$dir_name" != "/" ]]; then
						dir_name=${dir_name##*/}
					fi
					if [[ "$mode" == "validate" ]]; then
						echo "Testing: $mc_name $org_name $wc_name $dir_name"
						echo -n "yamllint: "
						./tools/fake-flux-build build "$mc_name" "$org_name" "$wc_name" "$dir_name" | yamllint - && echo "OK"
						echo "kubeconform: "
						./tools/fake-flux-build build "$mc_name" "$org_name" "$wc_name" "$dir_name" | kubeconform -ignore-missing-schemas -output text && echo "OK"
						echo ""
					else
						echo "---"
						./tools/fake-flux-build build "$mc_name" "$org_name" "$wc_name" "$dir_name"
					fi
				done
			done
		done
	done
}

if [[ $# -gt 1 ]]; then
	help
	exit 1
fi

case "$1" in
validate | template)
	test "$1"
	;;
*)
	help
	;;
esac
